Note: You can be more constraining than I was.  You can (not legal input code) define if statement as:

if := if "(" expression ")" { statement | block } { else { statement | block } } ?

This is a c/c++ style if where the {} are logical grouping, not language characters,
You then define what an expression, statement and block are.  The ? makes the else optional.
(Ok, the "if" and "else" probably should have been in quotes unless I was making them otherwise redefiniable which I wasn't)
block := "{" statement* "}"

That's easy, a block is 0 or more statements trapped in braces.
statement and expression are where its really hard.

================================================================================

I'm still sorting this out, using your assembler as a sort of reverse engineered template. I will try to parse this:


# Try this!

print(8)
That seems simple enough...

================================================================================

Literals like "(" usually are not included in the parse tree. There are ways to control what is or is not in the parse tree.
You can get a string as "abcdefg" or list of "a", "b", "c", "d", "e", "f", "g".
In C, you don't know at the lex/parse level where "print" is an identifier. So you might say:

statement := identifier "(" valueList ")";

Note, you'd likely have more  options for how to make a statement, but for your example....
valueList := { value  |  valueList "," value }

Nicely recursive and I think it intelligently gives you all of that as one list. If not, read the manual
In your case, you can start with:

value := number

Eventually:

value := { number | string | identifier }

With other options.

================================================================================

Why is decnum16bit in parenthecies?
I don't see use of OPERATION or operation
print is not defined.

================================================================================

[
    ... [8] , 
    ... [7,9] ...
]

In this case, Instruction would be your own class containing two members: identifier (or perhaps functionName?) and values (a list of, you guessed it, values).
If you can do that, then your next exercise *might* be to generate input objects for llvm.
But, I don't want llvm in the question "how do I deal with the output of lark????"
class AsmHandler had methods based on language types.
Observe: def number(self, items) and def decnum16bit(self, items).
I did not do a function like you will need for valuelist.
Valuelist has to respect the recursive strcture.
Remember: valuelist: (valuelist "," number | number )

So you have tofigure out the recusion on it: 7, 9 -- 9 is a number and 7 is a value list containing 7.
So, if items is not 1 length, then.... it should be two: valuelist, number.  -- but tricked you -- it won't be value list.  We are in recursion land ;-)  It *should* transform the left-hand valuelist before the valuelist that consists of valueliest "." number.

Consider: 1, 2, 3, 4 ->    ( ( (  (1) , 2) , 3), 4)

def valuelist(self, items):
  # should first get the list (1), and transform it to the python list [1].
  if len(items) == 1: return items # Its already a list of 1

  else # len should be two: list, number
     result = items[0] # or a copy
     result.append(items[1])
     return result

  # Now, anywhere you have valuelist, you should instead have a list of numbers.

I could be wrong, that's why it is your exercise ;-)
Then, whenever you have an instruction, extract the identifier -- such as items[0].getValue() or some such, and the valuelist such as items[1]


[
    Tree(instruction,
        [
            Token(IDENTIFIER, 'print'),
                Tree(valuelist,
                    [
                        Tree(number, 
                            [
                                Token(DECNUM, '8')
                            ]
                        )
                    ]
                )
        ]
    ),
    Tree(instruction,
        [
            Token(IDENTIFIER, 'print'),
            Tree(valuelist,
                [
                    Tree(valuelist,
                        [
                            Tree(number, 
                                [
                                    Token(DECNUM, '7')
                                ]
                            )
                        ]
                    ),
                    Tree(number,
                        [
                            Token(DECNUM, '9')
                        ]
                    )
                ]
            )
        ]
    )
]
'
================================================================================

from lark import Tree, Transformer

class EvalExpressions(Transformer):
    def expr(self, args):
        return eval(args[0]) t = Tree('a', [Tree('expr', ['1+2'])])

print(EvalExpressions().transform( t )) # Prints: Tree(a, [3]) 

================================================================================

In TryParser:

    def parse(self, input):
        tree = self.__parser.parse(input)
        return tree # .children
I returned tree.children for a reason - after transforming, the tree was a list of my objects.
Had you run your transfer prior to that, like I had, this would have been different.
So, remove the .children from tree for what you are doing.
(I considered the transformation part of my parser reading and parsing).
This leads to another exception:

<__main__.TryTransformer object at 0x7f5216074f70>
[Token('DECNUM', '7')]
Traceback (most recent call last):
  File "/home/nekenyu/git/lark/lark/visitors.py", line 113, in _call_userfunc
    return f(children)
  File "./TryParser.py", line 42, in number
    return int(item)
TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'
(and an exception parsing that ;-)
In TryTransformer, I cleaned up the following:

    def valuelist(self, items):
        print(items)
        return list(items)
    def number(self, items):
        print(items)
        return int(items[0])
    def instruction(self, items):
        print(items)
        return items
class Instruction:
    def __init__(self, name, arguments):
        self.name = name
        self.arguments = arguments

    def __repr__(self):
        return "{Instruction %s: %s}" % (self.name, self.arguments)

class TryTransformer(lark.visitors.Transformer_InPlace):
   ...

    def instruction(self, items):
        print(items)
        #return items
        return Instruction(items[0], items[1])


Tree(Token('RULE', 'start'), [{Instruction print: [8]}, {Instruction print: [[7], 9]}])
So, I can get this as a final output:

[{Instruction print: [8]}, {Instruction print: [7, 9]}]

It requires more modification than I have done (not much, really, but.... there you have it.
                                                
So, #1: don't remove the containing start tag element by have TryParser.parse()
return tree.children, just tree.  You can remove it at the end.

#2. You've debugged to insanity in TryTransformer since that wasn't your problem.
Walk it bak a little.  Remember all functions for a rule or terminal get self,
and a list of items (children).
#3. Make a real Instruction class with a __repr__()
#4. Work on valueList().

xForm....  Lookup "isinstance()"
Becareful in your xForm() Tree case....  lists of length one and a single thing
are different

I understand the simplication, but its probably better if that was organized by
if isinstance(item, lark.tree.Tree):
   if 'DECNUM' == item.data.type:

And I am holding aside the following for later:

value: (number | expression)
valuelist: value ("," value)*
etc.

I want to see "1 * 2 + 12 / 3" Turn into:
expression:
   +
  [
     *: [1,2]
  ],
  [
   /: [12,3]
  ]

[
  [
     [1, '*', 2]
  ],
  '+',
  [
     [12, '/', 3]
  ]
]

expression: number | add | subtract | multiply | divide | group

group.50: "(" expression ")"
multiply.60: expression "*" expression
divide.60: expression "/" expression
add.70: expression "+" expression
subtract.70: expression "-" expression
valuelist = list

    def expression(self, items):
        #print("Items: {}".format(items))
        if 1 == len(items):
            if isinstance(items[0], Tree):
                return Instruction(items[0].data, items[0].children)
            else:
                return items[0]
        # TODO: Error handling, a lost art
        print("Failure!");
        exit(1)

    def group(self, items):
        #print ("Group: {}".format(items))
        return items[0]
# Try this!

print(8)
print(7,9)
print(1+2)
print(1+2+3)
print(1+2+3+4)
print( 1 * 2 + 3 / 4 - 5)
print( 1 * (2 + 3) / (4 - 5))
[ Begin Transformed:
	{Instruction print: [8]},
	{Instruction print: [7, 9]},
	{Instruction print: {Instruction add: [1, 2]}},
	{Instruction print: {Instruction add: [1, {Instruction add: [2, 3]}]}},
	{Instruction print: {Instruction add: [{Instruction add: [1, 2]}, {Instruction add: [3, 4]}]}},
	{Instruction print: {Instruction add: [{Instruction multiply: [1, 2]}, {Instruction subtract: [{Instruction divide: [3, 4]}, 5]}]}},
	{Instruction print: {Instruction multiply: [1, {Instruction divide: [{Instruction add: [2, 3]}, {Instruction subtract: [4, 5]}]}]}},
End Transformed ]
This message was deleted.
Side note: I don't think the priority numbers worked, I think it was the order on the line of expression:
Yeah, and its more mysterious than even taht

 raise UnexpectedToken(t, e.allowed, state=e.state)

expression:  value | VARIABLE_NAME | function 
                     | (UNARY_OPERATOR_PRE expression)
                     | (expression UNARY_OPERATOR_POST)
                     | (expression BINARY_OPERATOR expression)
                     | (expression TERNARY_OPERATOR_FIRST expression TERNARY_OPERATOR_SECOND expression)
valuelist: expression ("," expression)*

Note: This lets us refine what is an expression and valuelist isn't changing.

start
  function_def
    main
    no_value
    function_call
      writeln
      expression
        value	"Hello World!"

Tree(start, [Tree(function_def, [Token(FUNCTION_NAME, 'main'), Token(NOVAL, 'no_value'), Tree(function_call, [Token(FUNCTION_NAME, 'writeln'), Tree(expression, [Tree(value, [Token(STRING, '"Hello World!"')])])])])])

start
  function_def
    main
    no_value
    block
      function_call
        writeln
        expression
          value	"Hello World!"

Tree(start, 
    [
        Tree(function_def, [Token(FUNCTION_NAME, 'main'), Token(NOVAL, 'no_value'),
            Tree(block, 
            [
                Tree(function_call, [Token(FUNCTION_NAME, 'writeln'),
                    Tree(expression, 
                    [
                        Tree(value, [Token(STRING, '"Hello World!"')]
                        )
                    ]
                    )
                ]
                )
            ]
            )
        ]
        )
    ]
)

start
  function_def
    yay
    string
    block
      reserved_word
        return
        valuelist
          expression
            value	"Yay!"
  function_def
    main
    no_value
    block
      if
        condition	true
        block
          function_call
            writeln
            valuelist
              expression
                value
                  number	8
      elsif
        condition	false
        block
          function_call
            writeln
            valuelist
              expression
                value
                  number	7
              expression
                value
                  number	9
      else
        block
          function_call
            writeln
            valuelist
              expression
                expression
                  value
                    number	2
                +
                expression
                  value
                    number	3
      function_call
        writeln
        valuelist
          expression
            function_call	yay

===============================

elsif
        condition
          binary_expression
            expression	$x
            =               <- Why not take == or <=, etc...?
            expression
              value
                number	1

