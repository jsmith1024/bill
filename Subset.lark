// Subset Grammar
// =================================

// statement: (reserved_word | function_call) // | if | elsif | else)

// reserved words
reserved_word: RESERVED_WORD (valuelist | function_call)?
RESERVED_WORD: ("break" | "continue" | "return")

// classes
// CLASS_NAME: UPPER_CHAR ((UPPER_CHAR | LOWER_CHAR)) ~0..15
// ACCESS: ("public" | "private" | "protected" | "static")
// instantiate_class: CLASS_NAME "=" CLASS_NAME "(" valuelist? ")"
// def_class: "class" CLASS_NAME "(" CLASS_NAME? "):" _NEWLINE (_INDENT ACCESS (_indent (declare_variable | def_function)* _DEDENT)* _DEDENT)


// functions
typed_argument: VARIABLE_NAME ":" VARIABLE_TYPE
typed_argument_list: typed_argument ("," typed_argument)*
FUNCTION_NAME: LOWER_CHAR (UPPER_CHAR | LOWER_CHAR) ~0..15
function_call: FUNCTION_NAME "(" valuelist? ")"
function_def:  "fun" FUNCTION_NAME "(" typed_argument_list? "):" (NOVAL | VARIABLE_TYPE) block

// loops
while: "while"  condition ":" block
for: "for" condition ("," expression) ":" block

// conditionals
condition: binary_comp_expression | BOOL
if:     "if"    condition ":" block
elsif:  "elsif" condition ":" block
else:   "else:" block


// expressions  // group as urnary, etc//
UNARY_OPERATOR_PRE:   "-"  // negative
                    | "!"  // not
                    // | "("   // left parenthesis 

UNARY_OPERATOR_POST:  "++"  // increment
                    | "--"  // decrement
                    // | ")"   // right parenthesis

BINARY_MATH_OPERATOR: "+"   // add
                    | "-"   // subtract
                    | "*"   // multiply
                    | "/"   // divide
                    | "%"   // modulus
                    | "**"  // power
                    | "="   // assignment

BINARY_COMP_OPERATOR: "=="  // equal to
                    | "===" // is
                    | "!="  // not equal to
                    | ">="  // greater than or equal to
                    | ">"   // greater than to
                    | "<="  // less than or equal to
                    | "<"   // less than to

BINARY_LOGIC_OPERATOR: "&&" // and
                    | "||"  // or
                    | "!="  // xor
                    | "<<"  // shift left
                    | ">>"  // shift right

TERNARY_OPERATOR_FIRST:  "?"
TERNARY_OPERATOR_SECOND: ":"

unary_pre_expression: (UNARY_OPERATOR_PRE expression)
unary_post_expression: (expression UNARY_OPERATOR_POST)
binary_math_expression: (expression BINARY_MATH_OPERATOR expression)
binary_comp_expression: (expression BINARY_COMP_OPERATOR expression)
ternary_expression: (expression TERNARY_OPERATOR_FIRST expression TERNARY_OPERATOR_SECOND expression)

expression:   value
            | VARIABLE_NAME
            | function_call
            | unary_pre_expression
            | unary_post_expression
            | binary_math_expression
            | binary_comp_expression
            | ternary_expression
//             | (UNARY_OPERATOR_PRE expression)                                                   -> unary_pre_expression
//             | (expression UNARY_OPERATOR_POST)                                                  -> unary_post_expression
//             | (expression BINARY_MATH_OPERATOR expression)                                      -> binary_math_expression
//             | (expression BINARY_COMP_OPERATOR expression)                                      -> binary_comp_expression
//             | (expression TERNARY_OPERATOR_FIRST expression TERNARY_OPERATOR_SECOND expression) -> ternary_expression

// constants
CONSTANT_NAME: UPPER_CHAR (UPPER_CHAR | DECDIGIT | "_") ~0..15
declare_constatnt: "const" CONSTANT_NAME ":" VARIABLE_TYPE "(" valuelist ")"

// variables
VARIABLE_NAME: "$" LOWER_CHAR (UPPER_CHAR | LOWER_CHAR | DECDIGIT | "_") ~0..15 // "$" // ?
// VARIABLE_TYPE: BOOL | UINT | INT | FLOAT | STRING
VARIABLE_TYPE: "bool" | "uint" | "int" | "float" | "string"
assign_variable: expression         // VARIABLE_NAME "=" expression
declare_variable: "var" VARIABLE_NAME ":" VARIABLE_TYPE "(" valuelist? ")"

// dictionaries
// pair: value ":" valuelist
// dict: "{" pair ("," pair)* "}"

// tuples
// tuple: "(" valuelist ")"

// lists
// list: "[" valuelist "]"

// sets
// set: "{" valuelist "}"

// strings
%import common.ESCAPED_STRING -> STRING

// scalars -- consider importing a few
UINT: DECNUM
// // INT: ("-" | "+") DECNUM
%import common.SIGNED_INT -> INT
// // FLOAT: ("-" | "+") DECNUM "." DECNUM
%import common.SIGNED_FLOAT -> FLOAT
TRUE:  "true"
FALSE: "false"
BOOL: TRUE | FALSE
NULL:  "null"

// values
// contibuted by Jon Smith
DECDIGIT: ("0" .. "9")
HEXDIGIT: ("0" .. "9") | ("a" .. "f") | ("A" .. "F")
BINDIGIT: ("0" | "1")
decnum16bit: "(" DECNUM ")"
DECNUM: DECDIGIT~1..5
hexnum16bit: "#(" HEXNUM ")"
HEXNUM: HEXDIGIT~1..4
binnum16bit: "$(" BINNUM ")"
BINNUM: BINDIGIT~1..16
number: (decnum16bit | hexnum16bit | binnum16bit | UINT)

value: (number | BOOL | STRING | NULL)
valuelist: expression ("," expression)*

// comments
COMMENT: (/\#[^\n]*/ | "//" /[^\n]*/ | "/*" /[^\n]*/ "*/")
%ignore COMMENT

// whitespace
%import common.WS
%ignore WS

// others
UPPER_CHAR: ("A" .. "Z")
LOWER_CHAR: ("a" .. "z")
block: "{" (declare_variable | assign_variable | for | if | elsif | else | while | function_call | reserved_word | expression)* "}"

NOVAL: "no_value"

// contibuted by Jon Smith
%import common.NEWLINE -> _NEWLINE
BLANK: _NEWLINE
%ignore BLANK

start: (function_def | declare_variable) +
